library ieee;
use ieee.numeric_std.all;
use ieee.std_logic_1164.all;

--! This copmonent implements a run-length encoder for 1 bit black/white images.

--! The resulting runs are parametrized using the start position (#start_pos), end position (#end_pos) and
--! the corresponding row number (#row_number).
entity rle is
    generic(
        ROW_LENGTH          : positive := 640;   --! Length of a row in the input image
        ROW_LENGTH_WIDTH    : positive := 10;  --! Bitwidth of #ROW_LENGTH
        NUMBER_OF_ROWS      : positive := 480; --! Number of rows in the input image
        ROW_NUMBER_WIDTH    : positive := 9;   --! Bitwidth of #NUMBER_OF_ROWS
        PIXEL_OFFSET        : integer range 0 to 10 := 2;    --! Offset in the first line caused by filter_major
        LINE_OFFSET         : integer range 0 to 10 := 2     --! Number of lines absorbed by filter_major
        );
    port(
        clk         : in std_logic;   --! Clock input
        rstn        : in std_logic;   --! Negated asynchronous reset
        data_in     : in std_logic; --! 1 bit black or white input pixel
        data_rdy    : in std_logic; --! Indicates if the input data (#data_in) is ready to be processed
        start_pos   : out std_logic_vector(ROW_LENGTH_WIDTH-1 downto 0);  --! The starting position of the detected run. Only valid if #new_run is '1'.
        end_pos     : out std_logic_vector(ROW_LENGTH_WIDTH-1 downto 0);  --! The end position of the detected run. Only valid if #new_run is '1'.
        row_number  : out std_logic_vector(ROW_NUMBER_WIDTH-1 downto 0);--! The row number of the detected run. Only valid if #new_run is '1'.
        new_run     : out std_logic;    --! Indicates if a new run has been detected. The run parameters are only valid if #new_run is '1'.
        eol         : out std_logic;  --! Indicates if the run-length encoder has reached the end of a row in the image.
        eof         : out std_logic   --! Indicates if the run-length encoder has reached the end of the data stream (i.e. the image has been processed completely).
        );
end rle;

architecture behavioral of rle is

    -- STUDENT CODE HERE


    -- STUDENT CODE until HERE

begin

    -- STUDENT CODE HERE


    -- STUDENT CODE until HERE


end behavioral;
